# Traefik Dynamic Configuration
# Runtime configuration for middleware, services, and advanced routing

# HTTP Middleware
http:
  middlewares:
    # Security headers middleware
    security-headers:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        frameDeny: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
          Referrer-Policy: "strict-origin-when-cross-origin"
          Permissions-Policy: "geolocation=(), microphone=(), camera=()"

    # CORS middleware for API
    cors-api:
      headers:
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Requested-With"
          - "X-Tenant-ID"
          - "X-Request-ID"
        accessControlAllowOriginList:
          - "https://${DOMAIN}"
          - "https://www.${DOMAIN}"
        accessControlExposeHeaders:
          - "X-Request-ID"
          - "X-Rate-Limit-Remaining"
          - "X-Rate-Limit-Reset"
        accessControlAllowCredentials: true
        accessControlMaxAge: 86400

    # Rate limiting middleware
    rate-limit:
      rateLimit:
        burst: 100
        average: 50
        period: "1m"

    # API rate limiting (more restrictive)
    rate-limit-api:
      rateLimit:
        burst: 200
        average: 100
        period: "1m"

    # Compression middleware
    compression:
      compress: {}

    # Circuit breaker middleware
    circuit-breaker:
      circuitBreaker:
        expression: "NetworkErrorRatio() > 0.3 || ResponseCodeRatio(500, 600, 0, 600) > 0.3"
        checkPeriod: "10s"
        fallbackDuration: "30s"
        recoveryDuration: "10s"

    # Retry middleware
    retry:
      retry:
        attempts: 3
        initialInterval: "100ms"

    # Strip prefix for API routes
    strip-api-prefix:
      stripPrefix:
        prefixes:
          - "/api"

    # Add prefix for API routes
    add-api-prefix:
      addPrefix:
        prefix: "/api"

    # Basic auth for Traefik dashboard
    traefik-auth:
      basicAuth:
        users:
          - "${TRAEFIK_AUTH_USERS}"

    # IP whitelist for admin endpoints
    admin-whitelist:
      ipWhiteList:
        sourceRange:
          - "127.0.0.1/32"
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"

    # Forward auth middleware (for future use)
    forward-auth:
      forwardAuth:
        address: "http://backend:3000/api/auth/verify"
        trustForwardHeader: true
        authResponseHeaders:
          - "X-User-ID"
          - "X-User-Role"
          - "X-Tenant-ID"

  # Routers
  routers:
    # Frontend router (highest priority)
    frontend:
      rule: "Host(`${DOMAIN}`) && !PathPrefix(`/api`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - compression
      service: frontend
      tls:
        certResolver: letsencrypt
      priority: 1

    # API router
    api:
      rule: "Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      entryPoints:
        - websecure
      middlewares:
        - security-headers
        - cors-api
        - rate-limit-api
        - retry
        - circuit-breaker
        - strip-api-prefix
      service: backend
      tls:
        certResolver: letsencrypt
      priority: 2

    # Traefik dashboard router
    traefik-dashboard:
      rule: "Host(`traefik.${DOMAIN}`)"
      entryPoints:
        - websecure
      middlewares:
        - traefik-auth
        - admin-whitelist
      service: api@internal
      tls:
        certResolver: letsencrypt
      priority: 3

  # Services
  services:
    # Frontend service
    frontend:
      loadBalancer:
        servers:
          - url: "http://caddy:80"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"

    # Backend service
    backend:
      loadBalancer:
        servers:
          - url: "http://backend:3000"
        healthCheck:
          path: "/health"
          interval: "30s"
          timeout: "5s"
        passHostHeader: true

# TCP Services (for future use)
tcp:
  services:
    # PostgreSQL service (internal only)
    postgres:
      loadBalancer:
        servers:
          - address: "postgres:5432"

# UDP Services (for future use)
udp:
  services: {}
